image: node:11-alpine

cache:
  paths:
    - node_modules/

stages:
  - build
  - test
  - stag

compile:
  stage: build
  tags:
    - docker
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: none
  before_script:
    - npm install --progress=false
  script:
    - npm run build
  artifacts:
    expire_in: 3 days
    untracked: false
    paths:
      - .build/
      - .dist/
      - node_modules/
      - src/
      - test/
      - scripts/
      - .npmrc
      - Dockerfile
      - Dockerfile.redis
      - config.json
      - log4js.json
      - package.json
    when: on_success

test:
  stage: test
  tags:
    - docker
  dependencies:
    - compile
  variables:
    GIT_STRATEGY: none
    DATASTORAGE_URL: 'redis://devtest@redis:6379/5'
  services:
    - name: redis
      alias: redis
  script:
    - npm run test

container:tag:
  stage: stag
  tags:
    - docker-builder
  dependencies:
    - compile
    - test
  when: on_success
  only:
    - tags
  variables:
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: none
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build --tag $CI_REGISTRY_IMAGE:latest . -f Dockerfile.redis
    - docker tag $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:latest
    - echo "Image ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME} -> ${CI_REGISTRY_IMAGE}:latest was staged successfully"
