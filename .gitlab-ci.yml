variables:
  IMAGE_HELM2: alpine/helm:2.14.0
  # IMAGE_HELM3: harbor.infra.kube/infra/helm:3
  IMAGE_HELM3: docker-cexpay.infra.kube/cexiolabs/docker/helm3/snapshot:master.dcb37861
  IMAGE_KUBECTL: bitnami/kubectl:1.20.2

.functions: &functions |
  function verify_runtime_version_helm3() {
    if [ -z "${CI_COMMIT_TAG}" ]; then
      echo "The function verify_runtime_version_helm3() is able to use for tags only. Variable CI_COMMIT_TAG is not set." >&2
      exit 127
    fi
    local EXPECTED_VERSION=$(echo "${CI_COMMIT_TAG}" | cut -d- -f1)
    local EXPECTED_SUFFIX=$(echo "${CI_COMMIT_TAG}" | cut -d- -f2)
    local HELM_CHART_APP_VERSION=$(grep -e '^appVersion:' runtime/Chart.yaml | cut -d ':' -f 2 | tr -d '[:space:]')
    if [ "$HELM_CHART_APP_VERSION-runtime" != "$EXPECTED_VERSION-$EXPECTED_SUFFIX" ]; then
      echo "Helm Chart appVersion '${HELM_CHART_APP_VERSION}' is not same as tag version '${EXPECTED_VERSION}'. Your tag should named as '$HELM_CHART_APP_VERSION-runtime' for the case." >&2
      exit 255
    fi
  }
  function verify_migration_version() {
    if [ -z "${CI_COMMIT_TAG}" ]; then
      echo "The function verify_migration_version() is able to use for tags only. Variable CI_COMMIT_TAG is not set." >&2
      exit 127
    fi
    local EXPECTED_VERSION=$(echo "${CI_COMMIT_TAG}" | cut -d- -f1)
    local EXPECTED_SUFFIX=$(echo "${CI_COMMIT_TAG}" | cut -d- -f2)
    local DATABASE_RELEASE_VERSION=$(grep -e '^RELEASE_TAG:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    if [ "$DATABASE_RELEASE_VERSION-database" != "$EXPECTED_VERSION-$EXPECTED_SUFFIX" ]; then
      echo "Migration manifest RELEASE_TAG '${DATABASE_RELEASE_VERSION}' is not same as tag version '${EXPECTED_VERSION}'. Your tag should named as '$DATABASE_RELEASE_VERSION-database' for the case." >&2
      exit 255
    fi
  }
  function kube_config_setup() {
    if [ -z "${KUBECONF_BASE64}" ]; then
      echo "kube_deploy_dev_image() wrong arguments. Expected environment variable KUBECONF_BASE64" >&2
      exit 1
    fi
    mkdir -p ~/.kube
    echo "$KUBECONF_BASE64" | base64 -d > ~/.kube/config
  }

before_script:
  - *functions

stages:
  - deploy
  - rollback
  - delete

include:
  - local: /.gitlab-ci-infratest.yml

# HELM 3 Runtime deployment
1EVO:runtime:install:
  stage: deploy
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - ./runtime.scripts/download-configmaps-and-secrects.sh cexpay-evolution-admin
    - cd runtime
    - helm --namespace "cexpay-evolution" list
    - helm --namespace "cexpay-evolution" upgrade --install --history-max 3 --values "values-base.yaml" --values "values.evolution.yaml" --set ci.tag="${CI_COMMIT_TAG}" --set ci.job="${CI_JOB_ID}" --set ci.pipeline="${CI_PIPELINE_ID}" "blue" .
    - helm --namespace "cexpay-evolution" history "blue" --max=3
  when: manual
  environment:
    name: evolution
    url: https://evolution-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

1EVO:runtime:rollback:
  stage: rollback
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay-evolution" list
    - helm --namespace "cexpay-evolution" history "blue" --max=3
    - helm --namespace "cexpay-evolution" rollback --recreate-pods "blue" 0
    - helm --namespace "cexpay-evolution" history "blue" --max=3
  when: manual
  environment:
    name: evolution
    url: https://evolution-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

1EVO:runtime:delete:
  stage: delete
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay-evolution" list
    - helm --namespace "cexpay-evolution" history "blue" --max=3
    - helm --namespace "cexpay-evolution" uninstall  "blue"
  when: manual
  environment:
    name: evolution
    url: https://evolution-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

2PRSN:runtime:install:
  stage: deploy
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - ./runtime.scripts/download-configmaps-and-secrects.sh cexpay-presentation-admin
    - cd runtime
    - helm --namespace "cexpay-presentation" list
    - helm --namespace "cexpay-presentation" upgrade --install --history-max 3 --values "values-base.yaml" --values "values.presentation.yaml" --set ci.tag="${CI_COMMIT_TAG}" --set ci.job="${CI_JOB_ID}" --set ci.pipeline="${CI_PIPELINE_ID}" "blue" .
    - helm --namespace "cexpay-presentation" history "blue" --max=3
  when: manual
  environment:
    name: presentation
    url: https://presentation-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

2PRSN:runtime:rollback:
  stage: rollback
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay-presentation" list
    - helm --namespace "cexpay-presentation" history "blue" --max=3
    - helm --namespace "cexpay-presentation" rollback --recreate-pods "blue" 0
    - helm --namespace "cexpay-presentation" history "blue" --max=3
  when: manual
  environment:
    name: presentation
    url: https://presentation-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

2PRSN:runtime:delete:
  stage: delete
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay-presentation" list
    - helm --namespace "cexpay-presentation" history "blue" --max=3
    - helm --namespace "cexpay-presentation" uninstall  "blue"
  when: manual
  environment:
    name: presentation
    url: https://presentation-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

3TEST:blue:runtime:install:
  stage: deploy
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - ./runtime.scripts/download-configmaps-and-secrects.sh cexpay-test-admin
    - cd runtime
    - helm --namespace "cexpay-test" list
    - helm --namespace "cexpay-test" upgrade --install --history-max 3 --values "values-base.yaml" --values "values.test.yaml" --set ci.tag="${CI_COMMIT_TAG}" --set ci.job="${CI_JOB_ID}" --set ci.pipeline="${CI_PIPELINE_ID}" "blue" .
    - helm --namespace "cexpay-test" history "blue" --max=3
  when: manual
  environment:
    name: test
    url: https://board.pay-cex-test.net/
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

3TEST:blue:board:install:
  stage: deploy
  image: 
    name: docker:20.10
  script:
    - apk add --no-cache git gnupg yq
    - DOCKER_IMAGE_REPOSITORY=$(yq eval '.application.board.serviceImage' runtime/values.test.yaml)
    - VERSION_TAG=$(yq eval '.application.board.tag' runtime/values-base.yaml)
    # Login to PROD registry
    - mkdir -p "/etc/docker/certs.d/$RELEASE_REGISTRY_HOST"
    - echo "${RELEASE_REGISTRY_CA}" > "/etc/docker/certs.d/${RELEASE_REGISTRY_HOST}/ca.crt"
    - echo "${RELEASE_REGISTRY_PASSWORD}" | docker login --username "${RELEASE_REGISTRY_USER}" --password-stdin "${RELEASE_REGISTRY_HOST}"
    # Cleanup
    - test -d .github-data && rm -rf .github-data
    # Checkout GitHub Pages repo
    - git clone "https://${GITHUB_LOGIN}:${GITHUB_TOKEN}@github.com/cexiolabs/cexpay.board-test-hosting.git" .github-data
    # Remove old data
    - (cd .github-data && rm -rf * && git add -A)
    # Grab image content
    - mkdir board-bin-tools
    - IMAGE="${DOCKER_IMAGE_REPOSITORY}:${VERSION_TAG}"
    - echo "Create a container to grab content of image '${IMAGE}'"
    - docker pull "${IMAGE}"
    - CONTAINER_ID=$(docker create ${IMAGE})
    - docker cp "${CONTAINER_ID}:/usr/local/cexiolabs/cexpay.board/." .github-data
    - docker cp "${CONTAINER_ID}:/usr/local/bin/." board-bin-tools
    - docker rm -v "${CONTAINER_ID}"
    - export CEXPAY_GATEWAY_ORIGIN_WHITE_LIST==$(yq eval '.application.board.env.CEXPAY_GATEWAY_ORIGIN_WHITE_LIST' runtime/values.test.yaml)
    - export CEXPAY_IDENTITY_API_URL=$(yq eval '.application.board.env.CEXPAY_IDENTITY_API_URL' runtime/values.test.yaml)
    - export CEXPAY_INVOICE_API_URL=$(yq eval '.application.board.env.CEXPAY_INVOICE_API_URL' runtime/values.test.yaml)
    - export CEXPAY_PAYTOOLS_INVOICE_API_URL=$(yq eval '.application.board.env.CEXPAY_PAYTOOLS_INVOICE_API_URL' runtime/values.test.yaml)
    - export CEXPAY_PROCESSING_V2_API_URL=$(yq eval '.application.board.env.CEXPAY_PROCESSING_V2_API_URL' runtime/values.test.yaml)
    - export CEXPAY_PROCESSING_V3_API_URL=$(yq eval '.application.board.env.CEXPAY_PROCESSING_V3_API_URL' runtime/values.test.yaml)
    - export OAUTH_CLIENT_ID=$(yq eval '.application.board.env.OAUTH_CLIENT_ID' runtime/values.test.yaml)
    - export POST_LOGOUT_REDIRECT_URL=$(yq eval '.application.board.env.POST_LOGOUT_REDIRECT_URL' runtime/values.test.yaml)
    - OMIT_NGINX=yes DIST_PATH=.github-data/pscl BASE_PATH=/pscl/ OAUTH_CALLBACK_PATH=/pscl/profile/oauth-challenge/ ./board-bin-tools/docker-entrypoint-pscl.sh
    - OMIT_NGINX=yes DIST_PATH=.github-data/wznk BASE_PATH=/wznk/ OAUTH_CALLBACK_PATH=/wznk/profile/oauth-challenge/ ./board-bin-tools/docker-entrypoint-wznk.sh
    - OMIT_NGINX=yes DIST_PATH=.github-data/yong BASE_PATH=/yong/ OAUTH_CALLBACK_PATH=/wznk/profile/oauth-challenge/ ./board-bin-tools/docker-entrypoint-yong.sh
    - echo -n "board.pay-cex-test.net" > .github-data/CNAME
    - touch .github-data/.nojekyll
    - (cd .github-data && git config --local user.name "${GITHUB_USER}" && git config --local user.email "${GITHUB_EMAIL}" && git add -A && git commit --amend --message "${VERSION_TAG}" && git push --force)
  when: manual
  environment:
    name: test
    url: https://pay-cex-test.net/
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

3TEST:green:runtime:install:
  stage: deploy
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - ./runtime.scripts/download-configmaps-and-secrects.sh cexpay-test-admin
    - cd runtime
    - helm --namespace "cexpay-test" list
    - helm --namespace "cexpay-test" upgrade --install --history-max 3 --values "values-base.yaml" --values "values.test.yaml" --set ci.tag="${CI_COMMIT_TAG}" --set ci.job="${CI_JOB_ID}" --set ci.pipeline="${CI_PIPELINE_ID}" "green" .
    - helm --namespace "cexpay-test" history "green" --max=3
  when: manual
  environment:
    name: test
    url: https://board.pay-cex-test.net/
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

3TEST:blue:runtime:rollback:
  stage: rollback
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay-test" list
    - helm --namespace "cexpay-test" history "blue" --max=3
    - helm --namespace "cexpay-test" rollback --recreate-pods "blue" 0
    - helm --namespace "cexpay-test" history "blue" --max=3
  when: manual
  environment:
    name: test
    url: https://board.pay-cex-test.net/
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

3TEST:blue:runtime:delete:
  stage: delete
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay-test" list
    - helm --namespace "cexpay-test" history "blue" --max=3
    - helm --namespace "cexpay-test" uninstall  "blue"
  when: manual
  environment:
    name: test
    url: https://board.pay-cex-test.net/
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

3TEST:green:runtime:delete:
  stage: delete
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay-test" list
    - helm --namespace "cexpay-test" history "green" --max=3
    - helm --namespace "cexpay-test" uninstall  "green"
  when: manual
  environment:
    name: test
    url: https://board.pay-cex-test.net/
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime(-rc[0-9]+)?$/

4PROD:blue:runtime:install:
  stage: deploy
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - ./runtime.scripts/download-configmaps-and-secrects.sh cexpay-admin
    - cd runtime
    - helm --namespace "cexpay" list
    - helm --namespace "cexpay" upgrade --install --history-max 3 --values "values-base.yaml" --values "values.production.yaml" --set ci.tag="${CI_COMMIT_TAG}" --set ci.job="${CI_JOB_ID}" --set ci.pipeline="${CI_PIPELINE_ID}" "blue" .
    - helm --namespace "cexpay" history "blue" --max=3
  when: manual
  environment:
    name: production
    url: https://cexpay.io/
  tags:
    - crtpdpl
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime$/

4PROD:blue:board:install:
  stage: deploy
  image: 
    name: docker:20.10
  script:
    - apk add --no-cache git gnupg yq
    - DOCKER_IMAGE_REPOSITORY=$(yq eval '.application.board.serviceImage' runtime/values-base.yaml)
    - VERSION_TAG=$(yq eval '.application.board.tag' runtime/values-base.yaml)
    # Login to PROD registry
    - mkdir -p "/etc/docker/certs.d/$RELEASE_REGISTRY_HOST"
    - echo "${RELEASE_REGISTRY_CA}" > "/etc/docker/certs.d/${RELEASE_REGISTRY_HOST}/ca.crt"
    - echo "${RELEASE_REGISTRY_PASSWORD}" | docker login --username "${RELEASE_REGISTRY_USER}" --password-stdin "${RELEASE_REGISTRY_HOST}"
    # Cleanup
    - test -d .github-data && rm -rf .github-data
    # Checkout GitHub Pages repo
    - git clone "https://${GITHUB_LOGIN}:${GITHUB_TOKEN}@github.com/cexiolabs/cexpay.board-production-hosting.git" .github-data
    # Remove old data
    - (cd .github-data && rm -rf * && git add -A)
    # Grab image content
    - mkdir board-bin-tools
    - IMAGE="${DOCKER_IMAGE_REPOSITORY}:${VERSION_TAG}"
    - echo "Create a container to grab content of image '${IMAGE}'"
    - docker pull "${IMAGE}"
    - CONTAINER_ID=$(docker create ${IMAGE})
    - docker cp "${CONTAINER_ID}:/usr/local/cexiolabs/cexpay.board/." .github-data
    - docker cp "${CONTAINER_ID}:/usr/local/bin/." board-bin-tools
    - docker rm -v "${CONTAINER_ID}"
    - export CEXPAY_GATEWAY_ORIGIN_WHITE_LIST==$(yq eval '.application.board.env.CEXPAY_GATEWAY_ORIGIN_WHITE_LIST' runtime/values.production.yaml)
    - export CEXPAY_IDENTITY_API_URL=$(yq eval '.application.board.env.CEXPAY_IDENTITY_API_URL' runtime/values.production.yaml)
    - export CEXPAY_INVOICE_API_URL=$(yq eval '.application.board.env.CEXPAY_INVOICE_API_URL' runtime/values.production.yaml)
    - export CEXPAY_PAYTOOLS_INVOICE_API_URL=$(yq eval '.application.board.env.CEXPAY_PAYTOOLS_INVOICE_API_URL' runtime/values.production.yaml)
    - export CEXPAY_PROCESSING_V2_API_URL=$(yq eval '.application.board.env.CEXPAY_PROCESSING_V2_API_URL' runtime/values.production.yaml)
    - export CEXPAY_PROCESSING_V3_API_URL=$(yq eval '.application.board.env.CEXPAY_PROCESSING_V3_API_URL' runtime/values.production.yaml)
    - export OAUTH_CLIENT_ID=$(yq eval '.application.board.env.OAUTH_CLIENT_ID' runtime/values.production.yaml)
    - export POST_LOGOUT_REDIRECT_URL=$(yq eval '.application.board.env.POST_LOGOUT_REDIRECT_URL' runtime/values.production.yaml)
    - OMIT_NGINX=yes DIST_PATH=.github-data/pscl BASE_PATH=/pscl/ OAUTH_CALLBACK_PATH=/pscl/profile/oauth-challenge/ ./board-bin-tools/docker-entrypoint-pscl.sh
    - OMIT_NGINX=yes DIST_PATH=.github-data/wznk BASE_PATH=/wznk/ OAUTH_CALLBACK_PATH=/wznk/profile/oauth-challenge/ ./board-bin-tools/docker-entrypoint-wznk.sh
    - OMIT_NGINX=yes DIST_PATH=.github-data/yong BASE_PATH=/yong/ OAUTH_CALLBACK_PATH=/wznk/profile/oauth-challenge/ ./board-bin-tools/docker-entrypoint-yong.sh
    - echo -n "board.cexpay.io" > .github-data/CNAME
    - touch .github-data/.nojekyll
    - (cd .github-data && git config --local user.name "${GITHUB_USER}" && git config --local user.email "${GITHUB_EMAIL}" && git add -A && git commit --amend --message "${VERSION_TAG}" && git push --force)
  when: manual
  environment:
    name: production-board
    url: https://cexpay.io/
  # tags:
  #   - cexiolabs-github-pages
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime$/

4PROD:blue:landing:install:
  stage: deploy
  image: 
    name: docker:20.10
  script:
    - apk add --no-cache git gnupg yq
    - DOCKER_IMAGE_REPOSITORY=$(yq eval '.application.landing.serviceImage' runtime/values-base.yaml)
    - VERSION_TAG=$(yq eval '.application.landing.tag' runtime/values-base.yaml)
    # Login to PROD registry
    - mkdir -p "/etc/docker/certs.d/$RELEASE_REGISTRY_HOST"
    - echo "${RELEASE_REGISTRY_CA}" > "/etc/docker/certs.d/${RELEASE_REGISTRY_HOST}/ca.crt"
    - echo "${RELEASE_REGISTRY_PASSWORD}" | docker login --username "${RELEASE_REGISTRY_USER}" --password-stdin "${RELEASE_REGISTRY_HOST}"
    # Cleanup
    - test -d .github-data && rm -rf .github-data
    # Checkout GitHub Pages repo
    - git clone "https://${GITHUB_LOGIN}:${GITHUB_TOKEN}@github.com/cexiolabs/cexpay.landing-hosting.git" .github-data
    # Remove old data
    - (cd .github-data && rm -rf * && git add -A)
    # Grab image content
    - IMAGE="${DOCKER_IMAGE_REPOSITORY}:${VERSION_TAG}"
    - echo "Create a container to grab content of image '${IMAGE}'"
    - docker pull "${IMAGE}"
    - CONTAINER_ID=$(docker create ${IMAGE})
    - docker cp "${CONTAINER_ID}:/usr/local/cexiolabs/cexpay.landing/." .github-data
    - docker rm -v "${CONTAINER_ID}"
    - find .github-data/ -type f -exec sed -i "s~/PLACEHOLDER_PATH_PREFIX~~g" {} \;
    - echo -n "cexpay.io" > .github-data/CNAME
    - touch .github-data/.nojekyll
    - (cd .github-data && git config --local user.name "${GITHUB_USER}" && git config --local user.email "${GITHUB_EMAIL}" && git add -A && git commit --amend --message "${VERSION_TAG}" && git push --force)
  when: manual
  environment:
    name: production
    url: https://cexpay.io/
  # tags:
  #   - cexiolabs-github-pages
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime$/

4PROD:green:runtime:install:
  stage: deploy
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - ./runtime.scripts/download-configmaps-and-secrects.sh cexpay-admin
    - cd runtime
    - helm --namespace "cexpay" list
    - helm --namespace "cexpay" upgrade --install --history-max 3 --values "values-base.yaml" --values "values.production.yaml" --set ci.tag="${CI_COMMIT_TAG}" --set ci.job="${CI_JOB_ID}" --set ci.pipeline="${CI_PIPELINE_ID}" "green" .
    - helm --namespace "cexpay" history "green" --max=3
  when: manual
  environment:
    name: production-green
    url: https://cexpay.io/
  tags:
    - crtpdpl
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime$/

4PROD:blue:runtime:rollback:
  stage: rollback
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay" list
    - helm --namespace "cexpay" history "blue" --max=3
    - helm --namespace "cexpay" rollback --recreate-pods "blue" 0
    - helm --namespace "cexpay" history "blue" --max=3
  when: manual
  environment:
    name: production
    url: https://cexpay.io/
  tags:
    - crtpdpl
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime$/

4PROD:blue:runtime:delete:
  stage: delete
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay" list
    - helm --namespace "cexpay" history "blue" --max=3
    - helm --namespace "cexpay" uninstall "blue"
  when: manual
  environment:
    name: production
    url: https://cexpay.io/
  tags:
    - crtpdpl
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime$/

4PROD:green:runtime:delete:
  stage: delete
  image:
    name: ${IMAGE_HELM3}
    entrypoint: [""]
  script:
    - verify_runtime_version_helm3
    - kube_config_setup
    - cd runtime
    - helm --namespace "cexpay" list
    - helm --namespace "cexpay" history "green" --max=3
    - helm --namespace "cexpay" uninstall  "green"
  when: manual
  environment:
    name: production-green
    url: https://cexpay.io/
  tags:
    - crtpdpl
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-runtime$/



#
#
# Database migration TAGs
#
#
1EVO:install:db:
  image:
    name: ${IMAGE_KUBECTL}
    entrypoint: [""]
  stage: deploy
  script:
    - verify_migration_version
    - export KUBECONFIG=/tmp/.kube-config
    - echo "$KUBECONF_BASE64" | base64 -d > "${KUBECONFIG}"
    - DATABASE_IMAGE_TAG=$(grep -e '^DATABASE_IMAGE_TAG:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - INSTALL_VERSION=$(grep -e '^INSTALL_VERSION:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - ./migration/migration-exec.sh --release-version="$CI_COMMIT_TAG" --kube-context=evolution --kube-namespace=cexpay-evolution --kube-admin-namespace=cexpay-evolution-admin --image=harbor.infra.kube/cexpay/database/migration/evolution --tag="${DATABASE_IMAGE_TAG}" --target-version="${INSTALL_VERSION}" --install
  when: manual
  environment:
    name: evolution-database
    url: https://evolution-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-database(-rc[0-9]+)?$/

1EVO:rollback:db:
  image:
    name: ${IMAGE_KUBECTL}
    entrypoint: [""]
  stage: rollback
  script:
    - verify_migration_version
    - export KUBECONFIG=/tmp/.kube-config
    - echo "$KUBECONF_BASE64" | base64 -d > "${KUBECONFIG}"
    - DATABASE_IMAGE_TAG=$(grep -e '^DATABASE_IMAGE_TAG:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - test -z "${ROLLBACK_VERSION}" && ROLLBACK_VERSION=$(grep -e '^ROLLBACK_VERSION:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - ./migration/migration-exec.sh --release-version="$CI_COMMIT_TAG" --kube-context=evolution --kube-namespace=cexpay-evolution --kube-admin-namespace=cexpay-evolution-admin --image=harbor.infra.kube/cexpay/database/migration/evolution --tag="${DATABASE_IMAGE_TAG}" --target-version="${ROLLBACK_VERSION}" --rollback
  when: manual
  environment:
    name: evolution-database
    url: https://evolution-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-database(-rc[0-9]+)?$/

2PRSN:install:db:
  image:
    name: ${IMAGE_KUBECTL}
    entrypoint: [""]
  stage: deploy
  script:
    - verify_migration_version
    - export KUBECONFIG=/tmp/.kube-config
    - echo "$KUBECONF_BASE64" | base64 -d > "${KUBECONFIG}"
    - DATABASE_IMAGE_TAG=$(grep -e '^DATABASE_IMAGE_TAG:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - INSTALL_VERSION=$(grep -e '^INSTALL_VERSION:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - ./migration/migration-exec.sh --release-version="$CI_COMMIT_TAG" --kube-context=presentation --kube-namespace=cexpay-presentation --kube-admin-namespace=cexpay-presentation-admin --image=harbor.infra.kube/cexpay/database/migration/presentation --tag="${DATABASE_IMAGE_TAG}" --target-version="${INSTALL_VERSION}" --install
  when: manual
  environment:
    name: presentation-database
    url: https://presentation-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-database(-rc[0-9]+)?$/

2PRSN:rollback:db:
  image:
    name: ${IMAGE_KUBECTL}
    entrypoint: [""]
  stage: rollback
  script:
    - verify_migration_version
    - export KUBECONFIG=/tmp/.kube-config
    - echo "$KUBECONF_BASE64" | base64 -d > "${KUBECONFIG}"
    - DATABASE_IMAGE_TAG=$(grep -e '^DATABASE_IMAGE_TAG:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - test -z "${ROLLBACK_VERSION}" && ROLLBACK_VERSION=$(grep -e '^ROLLBACK_VERSION:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - ./migration/migration-exec.sh --release-version="$CI_COMMIT_TAG" --kube-context=presentation --kube-namespace=cexpay-presentation --kube-admin-namespace=cexpay-presentation-admin --image=harbor.infra.kube/cexpay/database/migration/presentation --tag="${DATABASE_IMAGE_TAG}" --target-version="${ROLLBACK_VERSION}" --rollback
  when: manual
  environment:
    name: presentation-database
    url: https://presentation-cexpay.dev.kube
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-database(-rc[0-9]+)?$/

3TEST:install:db:
  image:
    name: ${IMAGE_KUBECTL}
    entrypoint: [""]
  stage: deploy
  script:
    - verify_migration_version
    - export KUBECONFIG=/tmp/.kube-config
    - echo "$KUBECONF_BASE64" | base64 -d > "${KUBECONFIG}"
    - DATABASE_IMAGE_TAG=$(grep -e '^DATABASE_IMAGE_TAG:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - INSTALL_VERSION=$(grep -e '^INSTALL_VERSION:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - ./migration/migration-exec.sh --release-version="$CI_COMMIT_TAG" --kube-context=test --kube-namespace=cexpay-test --kube-admin-namespace=cexpay-test-admin --image=harbor.infra.kube/cexpay/database/migration/test --tag="${DATABASE_IMAGE_TAG}" --target-version="${INSTALL_VERSION}" --install
  when: manual
  environment:
    name: test-database
    url: https://pay-cex-test.net
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-database$/

3TEST:rollback:db:
  image:
    name: ${IMAGE_KUBECTL}
    entrypoint: [""]
  stage: rollback
  script:
    - verify_migration_version
    - export KUBECONFIG=/tmp/.kube-config
    - echo "$KUBECONF_BASE64" | base64 -d > "${KUBECONFIG}"
    - DATABASE_IMAGE_TAG=$(grep -e '^DATABASE_IMAGE_TAG:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - test -z "${ROLLBACK_VERSION}" && ROLLBACK_VERSION=$(grep -e '^ROLLBACK_VERSION:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - ./migration/migration-exec.sh --release-version="$CI_COMMIT_TAG" --kube-context=test --kube-namespace=cexpay-test --kube-admin-namespace=cexpay-test-admin --image=harbor.infra.kube/cexpay/database/migration/test --tag="${DATABASE_IMAGE_TAG}" --target-version="${ROLLBACK_VERSION}" --rollback
  when: manual
  environment:
    name: test-database
    url: https://pay-cex-test.net
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-database$/

4PROD:install:db:
  image:
    name: ${IMAGE_KUBECTL}
    entrypoint: [""]
  stage: deploy
  script:
    - verify_migration_version
    - export KUBECONFIG=/tmp/.kube-config
    - echo "$KUBECONF_BASE64" | base64 -d > "${KUBECONFIG}"
    - DATABASE_IMAGE_TAG=$(grep -e '^DATABASE_IMAGE_TAG:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - INSTALL_VERSION=$(grep -e '^INSTALL_VERSION:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - ./migration/migration-exec.sh --release-version="$CI_COMMIT_TAG" --kube-context=prod --kube-namespace=cexpay --kube-admin-namespace=cexpay-admin --image=harbor.infra.kube/cexpay/database/migration/production --tag="${DATABASE_IMAGE_TAG}" --target-version="${INSTALL_VERSION}" --install
  when: manual
  environment:
    name: production-database
    url: https://cexpay.io/
  tags:
    - crtpdpl
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-database$/

4PROD:rollback:db:
  image:
    name: ${IMAGE_KUBECTL}
    entrypoint: [""]
  stage: rollback
  script:
    - verify_migration_version
    - export KUBECONFIG=/tmp/.kube-config
    - echo "$KUBECONF_BASE64" | base64 -d > "${KUBECONFIG}"
    - DATABASE_IMAGE_TAG=$(grep -e '^DATABASE_IMAGE_TAG:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - ROLLBACK_VERSION=$(grep -e '^ROLLBACK_VERSION:' migration/MANIFEST | cut -d ':' -f 2 | tr -d '[:space:]')
    - ./migration/migration-exec.sh --release-version="$CI_COMMIT_TAG" --kube-context=prod --kube-namespace=cexpay --kube-admin-namespace=cexpay-admin --image=harbor.infra.kube/cexpay/database/migration/production --tag="${DATABASE_IMAGE_TAG}" --target-version="${ROLLBACK_VERSION}" --rollback
  when: manual
  environment:
    name: production-database
    url: https://cexpay.io/
  tags:
    - crtpdpl
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-database$/


#
#
# Install/sync admin config maps
#
#
4PROD:configmaps:
  image:
    name: ${IMAGE_KUBECTL}
    entrypoint: [""]
  stage: deploy
  script:
    - export KUBECONFIG=/tmp/.kube-config
    - echo "$KUBECONF_BASE64" | base64 -d > "${KUBECONFIG}"
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/api-envvars.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/gatehostinternal-envvars.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/identity-envvars.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/invoice-envvars.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/messengerbridge-files.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/notifier-envvars.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/notifier-files.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/processing-envvars.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/processing-files.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/statuspage-envvars.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/statuspage-files.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/supportbot-envvars.yaml
    - kubectl --namespace cexpay-admin apply --filename=runtime.configmaps/production/supportbot-files.yaml
  when: manual
  environment:
    name: production-database
    url: https://cexpay.io/
  tags:
    - crtpdpl
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /-configmaps$/
