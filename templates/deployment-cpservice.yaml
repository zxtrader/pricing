apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ .Chart.Name }}-cpservice{{ template "suffix" . }}
  name: {{ .Chart.Name }}-cpservice{{ template "suffix" . }}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}-cpservice{{ template "suffix" . }}
    spec:
      initContainers:
      - name: migration
        image: {{ .Values.docker.cpservice.image }}-migration:{{ .Values.docker.cpservice.tag }}
        volumeMounts:
        - name: secret-files-migration
          mountPath: /etc/cexiolabs/cryptopay/secrets
          # The service will delete all files after read its. So need write access.
          readOnly: false
      containers:
      - name: cpservice
        image: {{ .Values.docker.cpservice.image }}:{{ .Values.docker.cpservice.tag }}
        ports:
        # - containerPort: 80
        #   protocol: TCP
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8082
          protocol: TCP
        - containerPort: 9090
          protocol: TCP
        volumeMounts:
        - name: config-files
          mountPath: /etc/cexiolabs/cryptopay
          readOnly: true
        - name: secret-certificate
          mountPath: /etc/cexiolabs/cryptopay/ssl
          readOnly: true
        - name: secret-files
          mountPath: /etc/cexiolabs/cryptopay/secrets
          # The service will delete all files after read its. So need write access.
          readOnly: false
        envFrom:
        - configMapRef:
            name: cpservice-envvars
        # livenessProbe:
        #   httpGet:
        #     path: /livenessProbe
        #     port: 9090
        #     scheme: HTTP
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
        # readinessProbe:
        #   httpGet:
        #     path: /readinessProbe
        #     port: 9090
        #     scheme: HTTP
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
      # - name: echo
      #   image: mendhak/http-https-echo
      #   ports:
      #   - containerPort: 80
      #     protocol: TCP
      volumes:
      - name: config-files
        configMap:
          name: cpservice-files
      - name: secret-files
        secret:
          secretName: cpservice
      - name: secret-files-migration
        secret:
          secretName: cpservice-migration
      - name: secret-certificate
        secret:
          secretName: {{ .Chart.Name }}-cpservice{{ template "suffix" . }}-certificate
